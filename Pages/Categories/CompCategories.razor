@page "/categories"
@using Models.DTO
@using Repository.IRepository
@inject ICategoryRepository categoryRepository
@inject IJSRuntime JsRuntime
<h1 class="text-center">Categories</h1>

@attribute [Authorize]


<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">List of categories</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="create-category" class="btn btn-primary"><i class="bi bi-plus-circle-fill"></i>&nbsp; New Category</NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Actions</th>                   
                </tr>
            </thead>
            <tbody>
                @if (categoriesDTO.Count() > 0)
                {
                    foreach (var category in categoriesDTO)
                    {
                        <tr>
                            <td>@category.Id</td>
                            <td>@category.CategoryName</td>
                            <td>@category.Description</td>
                            <td>
                                <NavLink href="@($"edit-category/{category.Id}")" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandlerOnDelete(category.Id)"><i class="bi bi-trash-fill"></i>&nbsp; Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" style="text-align:center">there are no records</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<ConfirmDeletion processingParentComponent="isProcessing" confirmChange="ClickConfirmDelete"></ConfirmDeletion>

@code {
    private bool isProcessing { get; set; } = false;
    private int? deleteCategoryId { get; set; } = null;
    private IEnumerable<CategoryDTO> categoriesDTO { get; set; } = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        categoriesDTO = await categoryRepository.GetAllCategories();
    }

    private async Task HandlerOnDelete(int categoryId)
    {
        deleteCategoryId = categoryId;
        await JsRuntime.InvokeVoidAsync("ShowModalConfirmDelete");

    }

    public async Task ClickConfirmDelete(bool confirmed)
    {
        isProcessing = true;
        if (confirmed && deleteCategoryId != null)
        {        
            await categoryRepository.DeleteCategory(deleteCategoryId.Value);
            await JsRuntime.ToastrSuccess("Category removed successfully");
            categoriesDTO = await categoryRepository.GetAllCategories();
        }

        await JsRuntime.InvokeVoidAsync("HideModalConfirmDelete");
        isProcessing = false;
    }

}
