@page "/properties"
@using Models.DTO
@using Repository.IRepository
@using PropiedadesBlazor.Services
@inject IPropertyRepository propertyRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject IUploadFiles uploadFiles

@attribute [Authorize]


<h1 class="text-center">Properties</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">List of properties</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="create-property" class="btn btn-primary"><i class="bi bi-plus-circle-fill"></i>&nbsp; New Property</NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Area</th>
                    <th>Bedrooms</th>                    
                    <th>Bathrooms</th>
                    <th>Parkings</th>
                    <th>Price</th>
                    <th>Active</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (propertyDTO.Count() > 0)
                {
                    foreach (var property in propertyDTO)
                    {
                        <tr>
                            <td>@property.Id</td>
                            <td>@property.Name</td>
                            <td>@property.Description</td>
                            <td>@property.Area</td>
                            <td>@property.bedrooms</td>
                            <td>@property.bathrooms</td>
                            <td>@property.parking</td>
                            <td>@property.Price</td>
                            <td>@property.Active</td>
                            <td>@property.category.CategoryName</td>
                            <td>
                                <NavLink href="@($"edit-property/{property.Id}")" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandlerOnDelete(property.Id)"><i class="bi bi-trash-fill"></i>&nbsp; Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">there are no records</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<ConfirmDeletion processingParentComponent="isProcessing" confirmChange="ClickConfirmDelete"></ConfirmDeletion>

@code {
    private IEnumerable<PropertyDTO> propertyDTO { get; set; } = new List<PropertyDTO>();
    private bool isProcessing { get; set; } = false;
    private int? deletePropertyId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        propertyDTO = await propertyRepository.GetAllProperties();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await JsRuntime.InvokeVoidAsync("ShowModalConfirmDelete");
    // }

    private async Task HandlerOnDelete(int propertyId)
    {
        deletePropertyId = propertyId;
        await JsRuntime.InvokeVoidAsync("ShowModalConfirmDelete");
    }

    public async Task ClickConfirmDelete(bool confirmed)
    {
        isProcessing = true;
        if(confirmed && deletePropertyId != null)
        {
            PropertyDTO property = await propertyRepository.GetProperty(deletePropertyId.Value);
            foreach (var image in property.PropertyImages)
            {
                var imageName = image.UrlImageProperty.Replace($"{navigationManager.BaseUri}PropertiesImages/", "");
                uploadFiles.DeleteFile(imageName);
            }

            await propertyRepository.DeleteProperty(deletePropertyId.Value);
            await JsRuntime.ToastrSuccess("Property removed successfully");
            propertyDTO = await propertyRepository.GetAllProperties();
        }

        await JsRuntime.InvokeVoidAsync("HideModalConfirmDelete");
        isProcessing = false;
    }
}
